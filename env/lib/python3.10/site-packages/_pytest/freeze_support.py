"""Provides a function to report all internal modules for using freezing
tools."""

import importlib.util
import types
from typing import Iterator
from typing import List
from typing import Union


def freeze_includes() -> List[str]:
    """Return a list of module names used by pytest that should be
    included by cx_freeze."""
    pytest_module = importlib.util.find_spec("_pytest")
    if pytest_module is None:
        raise ModuleNotFoundError("_pytest module not found")
    result = list(_iter_all_modules(pytest_module.origin))
    return result


def _iter_all_modules(
    package_path: str,
    prefix: str = "",
) -> Iterator[str]:
    """Iterate over the names of all modules that can be found in the given
    package, recursively.

        >>> import _pytest
        >>> list(_iter_all_modules(_pytest.__path__[0]))
        ['_pytest._argcomplete', '_pytest._code.code', ...]
    """
    import os

    for _, name, is_package in importlib.util.find_spec(package_path).submodules(
        recursive=True
    ):
        if is_package:
            module_path = os.path.join(package_path, name.__name__)
            for m in _iter_all_modules(module_path, prefix=name.__name__ + "."):
                yield prefix + m
        else:
            yield prefix + name.__name__
