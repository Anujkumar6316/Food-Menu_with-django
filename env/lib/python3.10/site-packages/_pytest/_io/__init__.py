"""Module for writing formatted text to the terminal."""

from collections.abc import Callable
from platform import system


def get_terminal_width() -> int:
    """Get the width of the terminal.

    Returns:
        int: The width of the terminal.
    """
    if system() == "Windows":
        import ctypes

        user32 = ctypes.windll.user32
        return user32.GetSystemMetrics(0)

    return shutil.get_terminal_size((80, 20)).columns


class TerminalWriter:
    """Class for writing formatted text to the terminal.

    Attributes:
        width (int): The width of the terminal.
        bold_func (Callable): A function to write bold text.
        reset_func (Callable): A function to reset text formatting.
    """

    def __init__(self):
        """Initialize the TerminalWriter instance."""
        self.width = get_terminal_width()
        self.bold_func = self._get_bold_func()
        self.reset_func = self._get_reset_func()

    def _get_bold_func(self) -> Callable:
        """Get a function to write bold text.

        Returns:
            Callable: A function to write bold text.
        """
        if system() == "Windows":
            import ctypes

            kernel32 = ctypes.windll.kernel32
            return lambda s: kernel32.SetConsoleTextAttribute(kernel32.GetStdHandle(-11), 1) and print(s)

        return lambda s: print("\033[1m" + s + "\033[0m")

    def _get_reset_func(self) -> Callable:
        """Get a function to reset text formatting.

        Returns:
            Callable: A function to reset text formatting.
        """
        if system() == "Windows":
            import ctypes

            kernel32 = ctypes.windll.kernel32
            return lambda: kernel32.SetConsoleTextAttribute(kernel32.GetStdHandle(-11), 7)

        return lambda: print("\033[0m")

    def write_centered(self, text: str) -> None:
        """Write centered text to the terminal.

        Args:
            text (str): The text to write.
        """
        padding = (self.width - len(text)) // 2
        self.write_padded(text, padding)

    def write_padded(self, text: str, padding: int) -> None:
        """Write padded text to the terminal.

        Args:
            text (str): The text to write.
            padding (int): The amount of padding to add to the left of the text.
        """
        padded_text = " " * padding + text
        if system() == "Windows":
            print(padded_text)
        else:
            self.bold_func(padded_text)


__all__ = ["TerminalWriter", "get_terminal_width"]
