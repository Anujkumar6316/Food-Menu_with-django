from _pytest._io import Saferepr
from _pytest.config import Config
from _pytest.config import ExitCode
from _pytest.config.argparsing import Parser
from _pytest.fixtures import FixtureDef
from _pytest.fixtures import SubRequest
from _pytest.scope import Scope
from typing import Any
from typing import Callable
from typing import Dict
from typing import Generator
from typing import List
from typing import Optional
from typing import Type
from typing import Union


def pytest_addoption(parser: Parser) -> None:
    group = parser.getgroup("debugconfig")
    group.addoption(
        "--setuponly",
        "--setup-only",
        action="store_true",
        help="Only setup fixtures, do not execute tests",
    )
    group.addoption(
        "--setupshow",
        "--setup-show",
        action="store_true",
        help="Show setup of fixtures while executing tests",
    )


@pytest.hookimpl(wrapper=True)
def pytest_fixture_setup(
    fixturedef: FixtureDef[Any], request: SubRequest
) -> Generator[Any, Any, Any]:
    try:
        return (yield)
    finally:
        if request.config.option.setupshow:
            if hasattr(request, "param"):
                param = fixturedef.ids(request.param) if callable(fixturedef.ids) else fixturedef.ids[request.param_index]
                fixturedef.cached_param = param  # type: ignore[attr-defined]
            _show_fixture_action(fixturedef, request.config, "SETUP")


def pytest_fixture_post_finalizer(
    fixturedef: FixtureDef[Any], request: SubRequest
) -> None:
    if fixturedef.cached_result is not None:
        config = request.config
        if config.option.setupshow:
            _show_fixture_action(fixturedef, request.config, "TEARDOWN")
            if hasattr(fixturedef, "cached_param"):
                del fixturedef.cached_param  # type: ignore[attr-defined]


def _show_fixture_action(
    fixturedef: FixtureDef[Any], config: Config, msg: str
) -> None:
    capman = config.pluginmanager.getplugin("capturemanager")
    if capman:
        capman.suspend_global_capture()

    tw = config.get_terminal_writer()
    tw.line()
    scope_indent = list(reversed(Scope.values())).index(fixturedef._scope)
    tw.write(" " * 2 * scope_indent)
    tw.write(
        f"{msg.ljust(8)} {fixturedef.scope[0].upper()} {fixturedef.argname}"
    )

    if msg == "SETUP":
        deps = [arg for arg in fixturedef.argnames if arg != "request"]
        if deps:
            tw.write(f" (fixtures used: {', '.join(deps)})")

    if hasattr(fixturedef, "cached_param"):
        tw.write(f"[{Saferepr(fixturedef.cached_param, maxsize=42)}]")  # type: ignore[attr-defined]

    tw.flush()

    if capman:
        capman.resume_global_capture()


@pytest.hookimpl(tryfirst=True)
def pytest_cmdline_main(config: Config) -> Optional[Union[int, ExitCode]]:
    if config.option.setuponly:
        config.option.setupshow = True
    return None
